apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: service2-topic10-composition
  labels:
    tech: crossplane-composition
spec:
  compositeTypeRef:
    apiVersion: service.lyc-handson-aws.com/v1alpha1
    kind: ServiceOne
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        patchSets:
        - name: location-patchset
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.location"
              toFieldPath: "spec.forProvider.region"
              transforms:
                - type: map
                  map: 
                    Paris: "eu-west-3"
                    Virginia: "us-east-1"
        resources:
        - name: s3bucket
          base:
            apiVersion: s3.aws.crossplane.io/v1beta1
            kind: Bucket
            metadata:
              name:  service2-topic10-s3bucket
              crossplane.io/external-name: service2-topic10-s3bucket
            spec:
              providerConfigRef:
                name: default
              forProvider:
                locationConstraint: us-east-2
                websiteConfiguration:
                  indexDocument: 
                    suffix: index.html
                publicAccessBlockConfiguration:
                  blockPublicAcls: false
                  blockPublicPolicy: false
                  ignorePublicAcls: false
                  restrictPublicBuckets: false
                versioningConfiguration:
                  status: Suspended
                policy: 
                  version: 2012-10-17
                  statements:
                    - effect: Allow
                      principal:
                        allowAnon: true
                      action: 
                       - 's3:GetObject'
                      resource: 
                       - "arn:aws:s3:::service2-topic10-s3bucket/*"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.location"
              toFieldPath: "spec.forProvider.locationConstraint"
              transforms:
                - type: map
                  map: 
                    Paris: "eu-west-3"
                    Virginia: "us-east-1"
            - type: ToCompositeFieldPath
              fromFieldPath: 'status.atProvider.arn'
              toFieldPath: status.s3Arn
        - name: cloudwatch
          base:
            apiVersion: cloudwatchlogs.aws.crossplane.io/v1alpha1
            kind: LogGroup
            metadata:
              name: service2-topic10-loggroup
            spec:
              forProvider:
                region: us-east-2
                logGroupName: service2-topic10-loggroup
                retentionInDays: 1
              providerConfigRef:
                name: default
          patches:
            - type: PatchSet
              patchSetName: location-patchset
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.arn
              toFieldPath: status.cloudwatchArn
        - name: kms
          base:
            apiVersion: kms.aws.crossplane.io/v1alpha1
            kind: Key
            metadata:
              name: service2-topic10-loggroup
            spec:
              forProvider:
                region: us-east-2
                description: "KMS key for my composite resource"
                enableKeyRotation: true
              providerConfigRef:
                name: default
          patches:
            - type: PatchSet
              patchSetName: location-patchset
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.arn
              toFieldPath: status.kmsArn
        #- name: topicten
        #  base:
        #    apiVersion: app.lyc-handson-aws.com/v1alpha1
        #    kind: TopicTen
        #    metadata:
        #      name: service2-topic10-topicten
        #    spec: 
        #      cloudwatcharn: xx
        #      image: nginx
        #      kmsarn: xx
        #      replicas: 2
        #      targetarn: xx
        #  patches:
        #    - type: FromCompositeFieldPath
        #      fromFieldPath: "status.dynamodbArn"
        #      toFieldPath: "spec.targetarn"
        #    - type: FromCompositeFieldPath
        #      fromFieldPath: "status.cloudwatchArn"
        #      toFieldPath: "spec.cloudwatcharn"
        #    - type: FromCompositeFieldPath
        #      fromFieldPath: "status.kmsArn"
        #      toFieldPath: "spec.kmsarn"
        #    - type: FromCompositeFieldPath
        #      fromFieldPath: "spec.image"
        #      toFieldPath: "spec.image"
        #    - type: FromCompositeFieldPath
        #      fromFieldPath: "spec.replicas"
        #      toFieldPath: "spec.replicas"
